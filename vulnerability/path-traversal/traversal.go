package sqli

import (
	"net/http"

	"github.com/gen2brain/go-unarr"
	"github.com/julienschmidt/httprouter"
)

type PathTraversal struct{}

func New() PathTraversal {
	return PathTraversal{}
}

func (PathTraversal) SetRouter(r *httprouter.Router) {
	r.GET("/path-traversal", pathTraversalHandler)
}

func pathTraversalHandler(w http.ResponseWriter, r *http.Request, _ httprouter.Params) {
	package main

	import (
		"archive/zip"
		"io"
		"log"
		"net/http"
		"os"
		"path/filepath"
		"strings"
	)

	func unzipHandler(w http.ResponseWriter, r *http.Request) {
		tempFile, err := os.CreateTemp("", "upload-*.zip")
		if err != nil {
			log.Fatal(err)
		}
		defer tempFile.Close()

		fileBytes, err := io.ReadAll(r.Body)
		if err != nil {
			log.Fatal(err)
		}

		tempFile.Write(fileBytes)

		zipReader, _ := zip.OpenReader(tempFile.Name())
		for _, file := range zipReader.File {
			// Check if the file path starts with a permitted prefix
			if !strings.HasPrefix(file.Name, "permitted/") {
				continue
			}

			unzippedFilePath := filepath.Join("./extracted/", file.Name)
			if file.FileInfo().IsDir() {
				os.MkdirAll(unzippedFilePath, file.Mode())
				continue
			}

			unzippedFile, err := os.OpenFile(
				unzippedFilePath,
				os.O_WRONLY|os.O_CREATE|os.O_TRUNC,
				file.Mode(),
			)
			if err != nil {
				log.Fatal(err)
			}

			fileInArchive, err := file.Open()
			if err != nil {
				log.Fatal(err)
			}

			_, err = io.Copy(unzippedFile, fileInArchive)
			if err != nil {
				log.Fatal(err)
			}

			unzippedFile.Close()
			fileInArchive.Close()
		}
	}

